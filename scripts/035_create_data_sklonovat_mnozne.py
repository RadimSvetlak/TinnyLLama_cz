# ------------------------------------------------------------
# N√°zev: Gener√°tor tr√©ninkov√Ωch dat pro sklo≈àov√°n√≠ ƒçesk√Ωch podstatn√Ωch jmen
# pro mno≈æn√© ƒç√≠slo
# Popis:
#   Tento skript vytv√°≈ô√≠ tr√©ninkov√© datasety pro model (nap≈ô. Gemma/LLaMA)
#   urƒçen√© ke zpracov√°n√≠ a pochopen√≠ ƒçesk√©ho sklo≈àov√°n√≠.
#
#   Obsahuje:
#     - Funkci pro vyps√°n√≠ v≈°ech vzor≈Ø a jejich tvar≈Ø podle p√°d≈Ø.
#     - Rodovƒõ specifick√© instrukce a p≈ô√≠klady (rod_templates).
#     - Funkce create_gemini_prompts a create_gemini_prompts2, kter√© pro zadan√°
#       slova a vzory sestav√≠ prompty s √∫kolem k vygenerov√°n√≠ spr√°vn√Ωch p√°dov√Ωch
#       tvar≈Ø.
#     - Funkci process_prompts_with_gemma, kter√° ode≈°le tyto prompty do modelu,
#       zpracuje odpovƒõƒè a ulo≈æ√≠ ji v nƒõkolika variant√°ch (p≈ô√≠m√° ot√°zka,
#       p√°dov√° ot√°zka, dopl≈àovac√≠ vƒõta) do JSONL souboru.
#     - Funkci create_data, kter√° generuje sadu obecn√Ωch tr√©ninkov√Ωch p≈ô√≠klad≈Ø
#       na z√°kladƒõ dostupn√Ωch vzor≈Ø, slov a jejich p√°dov√Ωch tvar≈Ø.
#
# Vstupy:
#   - Slovn√≠ky declension_patterns a vzorova_slova s definicemi vzor≈Ø a
#     vzorov√Ωch slov.
#   - Lok√°ln√≠ instance modelu (llm) pro generov√°n√≠ tvar≈Ø.
#
# V√Ωstupy:
#   - Soubor vystup_trenink.jsonl obsahuj√≠c√≠ prompty a spr√°vn√© odpovƒõdi
#     pro tr√©nink modelu na sklo≈àov√°n√≠.
#   - Soubor train_prompts.jsonl s obecn√Ωmi tr√©ninkov√Ωmi p√°ry prompt‚Äìcompletion.
#
# Z√°vislosti:
#   - Python 3.8+
#   - llama-cpp-python
#   - Strukturovan√° vstupn√≠ data ve slovn√≠c√≠ch s p√°dov√Ωmi vzory a slovy.
#
# ------------------------------------------------------------



import google.generativeai as genai
import time
import re
import json
import random
# Slovn√≠k sklo≈àovac√≠ch vzor≈Ø s p≈ô√≠klady tvar≈Ø v jednotliv√Ωch p√°dech

from llama_cpp import Llama

# üß† Inicializace modelu Gemma
llm = Llama(
    model_path="D:\\AI\\gemma_test\\google_gemma-3-12b-it-qat-Q2_K.gguf",   
    #model_path="D:\\AI\\_models\\gpt-oss-20b-Q4_K_S.gguf",   
    n_ctx=2048,
    n_threads=12,
    n_gpu_layers=-1,
    n_batch=512,
    verbose=True
)



declension_patterns = {
    "≈æensk√Ω": {
        "≈æena":    ["≈æeny", "≈æen", "≈æen√°m", "≈æeny", "≈æeny", "≈æen√°ch", "≈æenami"],
        "r≈Ø≈æe":    ["r≈Ø≈æe", "r≈Ø≈æ√≠", "r≈Ø≈æ√≠m", "r≈Ø≈æe", "r≈Ø≈æe", "r≈Ø≈æ√≠ch", "r≈Ø≈æemi"],
        "p√≠se≈à":   ["p√≠snƒõ", "p√≠sn√≠", "p√≠sn√≠m", "p√≠snƒõ", "p√≠snƒõ", "p√≠sn√≠ch", "p√≠snƒõmi"],
        "kost":    ["kosti", "kost√≠", "kostem", "kosti", "kosti", "kostech", "kostmi"]
    },
    "st≈ôedn√≠": {
        "mƒõsto":   ["mƒõsta", "mƒõst", "mƒõst≈Øm", "mƒõsta", "mƒõsta", "mƒõstech", "mƒõsty"],
        "mo≈ôe":    ["mo≈ôe", "mo≈ô√≠", "mo≈ô√≠m", "mo≈ôe", "mo≈ôe", "mo≈ô√≠ch", "mo≈ôemi"],
        "staven√≠": ["staven√≠", "staven√≠", "staven√≠m", "staven√≠", "staven√≠", "staven√≠ch", "staven√≠mi"],
        "d√≠tƒõ":    ["dƒõti", "dƒõt√≠", "dƒõtem", "dƒõti", "dƒõti", "dƒõtech", "dƒõtmi"]
    },
    "mu≈æsk√Ω_≈æivotn√Ω": {
        "mu≈æ":     ["mu≈æi", "mu≈æ≈Ø", "mu≈æ≈Øm", "mu≈æe", "mu≈æi", "mu≈æ√≠ch", "mu≈æi"],
        "p√°n":     ["p√°ni", "p√°n≈Ø", "p√°n≈Øm", "p√°ny", "p√°ni", "p√°nech", "p√°ny"],
        "soudce":  ["soudci", "soudc≈Ø", "soudc≈Øm", "soudce", "soudci", "soudc√≠ch", "soudci"],
        "uƒçitel":  ["uƒçitel√©", "uƒçitel≈Ø", "uƒçitel≈Øm", "uƒçitele", "uƒçitel√©", "uƒçitel√≠ch", "uƒçiteli"]
    },
    "mu≈æsk√Ω_ne≈æivotn√Ω": {
        "hrad":    ["hrady", "hrad≈Ø", "hrad≈Øm", "hrady", "hrady", "hradech", "hrady"],
        "stroj":   ["stroje", "stroj≈Ø", "stroj≈Øm", "stroje", "stroje", "stroj√≠ch", "stroji"]
    }
}


vzorova_slova = {
    "≈æensk√Ω": {
        "≈æena": ["pƒõny", "nohy", "matky", "ruce", "dcery", "chudoby", "sestry", "tov√°rny", "knihy"],
        "r≈Ø≈æe": ["k≈Ø≈æe", "uƒçebnice", "pr√°ce", "ulice", "nemocnice", "du≈°e", "ulice", "nadƒõje"],
        "p√≠se≈à": ["pl√≠snƒõ", "zbranƒõ", "my≈°i", "vƒõ≈æe", "zdi"],
        "kost": ["radosti", "starosti", "noci", "moci", "smrti", "ƒç√°sti", "vlhkosti"]
    },
    "st≈ôedn√≠": {
        "mƒõsto": ["tƒõsta", "auta", "kola", "okna", "jablka", "divadla", "pouzdra", "raz√≠tka"],
        "mo≈ôe": ["pole", "srdce", "nebe", "slunce", "vejce"],
        "staven√≠": ["nastaven√≠", "n√°dra≈æ√≠", "na≈ô√≠zen√≠", "≈ô√≠zen√≠", "podez≈ôen√≠"],
        "d√≠tƒõ": ["≈°tƒõ≈àata", "ko≈•ata", "≈°tƒõ≈àata", "ml√°ƒèata", "zv√≠≈ôata"]
    },
    "mu≈æsk√Ω_≈æivotn√Ω": {
        "mu≈æ": ["ml≈æi", "no≈æe", "hr√°ƒçi", "hospod√°≈ôi", "p≈ô√°tel√©"],
        "p√°n": ["km√°ni", "voj√°ci", "dƒõdeƒçkov√©", "soused√©", "studenti"],
        "soudce": ["poslanci", "v≈Ødci", "l√©ka≈ôi", "ochr√°nci"],
        "p≈ôedseda": ["hrdinov√©", "kolegov√©", "turist√©", "spr√°vci", "kupci"]
    },
    "mu≈æsk√Ω_ne≈æivotn√Ω": {
        "hrad": ["hrady", "zuby", "se≈°ity", "p≈ô√≠stavy", "lesy"],
        "stroj": ["stroje", "pokoje", "vlaky", "stoly", "batohy"]
    }
}


# V√Ωpis v≈°ech vzor≈Ø a tvar≈Ø
def print_declension_patterns():
    for gender, patterns in declension_patterns.items():
        print(f"\nRod: {gender}")
        for pattern, forms in patterns.items():
            print(f"  Vzor: {pattern}")
            print(f"    P√°dy: {', '.join(forms)}")



# rodovƒõ specifick√° pravidla a p≈ô√≠klady
rod_templates = {
    "≈æensk√Ω": """\
- P≈ôechylov√°n√≠: dcery -> dcer√°m, hole -> hol√≠m
- Jemn√© zmƒõny samohl√°sek: ƒõ po d, t, n (nap≈ô. ≈æeny -> ≈æen√°m)
- Zmƒõna samohl√°sky: ƒõ po p, b, v, ale pozor na v√Ωjimky jako nap≈ô. 'matky', kde je spr√°vn√Ω tvar 'matk√°m' a ne 'matƒõm'.
- Mƒõkk√© souhl√°sky: k -> c (matky -> matk√°m), h -> z (nohy -> noh√°m)
- Vynech√°n√≠ e po mƒõkk√© souhl√°sce: p√≠snƒõ -> p√≠sn√≠m
V√Ωjimky: Je d≈Øle≈æit√©, aby model spr√°vnƒõ pochopil kl√≠ƒçov√© v√Ωjimky, jako jsou 'matky' -> 'matk√°m' a 'pƒõny' -> 'pƒõn√°m'. 
Tyto v√Ωjimky se objevuj√≠ i v jin√Ωch slovech, kde se sklo≈àov√°n√≠ m≈Ø≈æe li≈°it od bƒõ≈æn√©ho vzoru.
P≈ô√≠klady: 
tvary slova matky = "matky, matek, matk√°m, matky, matky, matk√°ch, matkami"
tvary slova chudoby = "chudoby, chudob, chudob√°m, chudoby, chudoby, chudob√°ch, chudobami"
""",

    "mu≈æsk√Ω_≈æivotn√Ω": """\
- 'y' po tvrd√Ωch (h, ch, k, r, d, t, n) 
- 'i' po mƒõkk√Ωch (≈æ, ≈°, ƒç, ≈ô, c, j)
- P≈ôechylov√°n√≠ kmene: psi -> ps≈Øm  
- Vynech√°n√≠ e po mƒõkk√© souhl√°sce na konci: dƒõdeƒçci -> dƒõdeƒçk≈Øm
P≈ô√≠klady: 
tvary slova psi: "psi, ps≈Ø, ps≈Øm, psy, psi, psech, psy"
tvary slova mu≈æi: "mu≈æi, mu≈æ≈Ø, mu≈æ≈Øm, mu≈æe, mu≈æi, mu≈æ√≠ch, mu≈æi"
""",

    "mu≈æsk√Ω_ne≈æivotn√Ω": """\
- Zmƒõna ≈Ø -> o v lok√°lu/instrument√°lu (stoly -> stol≈Øm)
- i/y dle tvrdosti souhl√°sek
P≈ô√≠klady: 
tvary slova stoly = "stoly, stol≈Ø, stol≈Øm, stoly, stoly, stolech, stoly"
""",

    "st≈ôedn√≠": """\
Specifika pro rod st≈ôedn√≠:
- Vokativ ƒçasto identick√Ω s nominativem
P≈ô√≠klady: 
tvary slova tƒõsta = "tƒõsta, tƒõst, tƒõst≈Øm, tƒõsta, tƒõsta, tƒõstech, tƒõsty"
tvary slova ku≈ôata = "ku≈ôata, ku≈ôat, ku≈ôat≈Øm, ku≈ôata, ku≈ôataa, ku≈ôatech, ku≈ôaty"
tvary slova mo≈ôe = "mo≈ôe, mo≈ô√≠, mo≈ô√≠m, mo≈ôe, mo≈ôe, mo≈ô√≠ch, mo≈ôi"
"""
}


def create_gemini_prompts():
    gemini_prompts = []
    cases = [
        "nominativ", "genitiv", "dativ",
        "akuzativ", "vokativ", "lok√°l", "instrument√°l"
    ]

    for rod, vzory in vzorova_slova.items():
        for vzor, words in vzory.items():
            if vzor not in declension_patterns.get(rod, {}):
                continue

            # p≈ôiprav√≠me text paradigmatu 1.‚Äì7. p√°du
            pattern_forms = declension_patterns[rod][vzor]
            pattern_lines = [
                f"{idx+1}. p√°d ({cases[idx]}): {form}"
                for idx, form in enumerate(pattern_forms)
            ]
            pattern_text = "\n".join(pattern_lines)

            for word in words:
                # base prompt s √∫kolem a uk√°zkou vzoru
                base_prompt = (
                    f"√ökolem je vysklo≈àovat slovo \"{word}\" podle vzoru \"{vzor}\".\n\n"
                    f"Sklo≈àov√°n√≠ vzoru \"{vzor}\" je n√°sleduj√≠c√≠:\n"
                    f"{pattern_text}\n\n"
                    f"P≈ôi sklo≈àov√°n√≠ pamatujte na mo≈æn√© v√Ωjimky:\n"
                )

                # p≈ôid√°me rodovƒõ specifick√© instrukce
                rod_instr = rod_templates.get(rod, "")

                # spoj√≠me v≈°e dohromady
                prompt = (
                    base_prompt
                    + rod_instr
                    + "\n\n"
                    + f"Vysklo≈àujte \"{word}\", ka≈æd√Ω tvar na nov√Ω ≈ô√°dek."
                    + "\nPamatujte, nepou≈æ√≠vejte jednotn√© ƒç√≠slo ani zdrobnƒõliny. "
                    + "\n Odpov√≠dej jedn√≠m slovem, kter√© je ve spr√°vn√©m tvaru"
                )

                gemini_prompts.append({
                    "prompt": prompt.strip(),
                    "completion": "",
                    "word": word,
                    "muster": vzor
                })

    process_prompts_with_gemma(gemini_prompts)
    return gemini_prompts
    
    
 

def process_prompts_with_gemma(prompts):
    output_file = "vystup_trenink_mn.jsonl"
    total = len(prompts)

    with open(output_file, "w", encoding="utf-8") as f:
        pass;

    for idx, entry in enumerate(prompts, start=1):
        prompt_text = entry["prompt"]
        word = entry.get("word", "???")
        vzor = entry.get("muster", "???")

        print(f"\nüü° Pos√≠l√°m prompt {idx} / {total}: {word} ({vzor})")

        try:
            # üîÅ Vytvo≈ô prompt pro Gemmu
            full_prompt = (
                "<start_of_turn>user\n"
                "Jsi u≈æiteƒçn√Ω chatbot, kter√Ω rozum√≠ ƒçesky. "
                "Kdy≈æ tƒõ po≈æ√°d√°m o sklo≈àov√°n√≠ slova, odpov√≠≈° sedmi tvary v po≈ôad√≠ p√°d≈Ø.\n\n"
                f"{prompt_text}\n"
                "<end_of_turn>\n<start_of_turn>model\n"
            )

            # üîç Zavolej model
            response = llm(full_prompt, max_tokens=512)
            raw_output = response["choices"][0]["text"].strip()
            print(f"üü¢ prompt_text:\n{prompt_text}")
            print(f"üü¢ Odpovƒõƒè:\n{raw_output}")

            # üßπ Zpracuj v√Ωstup ‚Äì fallback logika
            lines = [line.strip() for line in raw_output.split("\n") if line.strip()]
            forms = []

            for line in lines:
                match = re.search(r"^\d\.?\s*p√°d:?\s*(.+)", line, re.IGNORECASE) or \
                        re.search(r"^\d\.?\s*:? (.+)", line) or \
                        re.match(r"^[A-Za-z√Å-≈Ω√°-≈æ\-]+$", line)
                if match:
                    cleaned = re.sub(r"^\(?.*?\):\s*", "", line)
                    forms.append(cleaned.strip())



            if len(forms) < 3:
                print(f"‚ö†Ô∏è V√Ωstup je p≈ô√≠li≈° kr√°tk√Ω ({len(forms)} tvar≈Ø) ‚Äì p≈ôeskoƒçeno")
                continue


            # P√°dov√© ot√°zky a n√°zvy p√°d≈Ø
            padove_otazky = [
                ("Nominativ", "Kdo? Co?"),
                ("Genitiv", "Koho? ƒåeho?"),
                ("Dativ", "Komu? ƒåemu?"),
                ("Akuzativ", "Koho? Co?"),
                ("Vokativ", "Osloven√≠"),
                ("Lok√°l", "O kom? O ƒçem?"),
                ("Instrument√°l", "S k√Ωm? S ƒç√≠m?")
            ]
   

            # üíæ Ulo≈æ do souboru
            sentence_starters = {
                "1. p√°d": ["Toto jsou", "Zde stoj√≠", "Tohle jsou", "Za dve≈ômi jsou", "Hlavn√≠ hrdinov√© jsou"],
                "2. p√°d": ["Nep≈Øjde to bez", "Vid√≠m to uprost≈ôed", "Bylo to bez", "Boj√≠m se", "Zbavil jsem se"],
                "3. p√°d": ["Za to dƒõkuji", "R√°d pom√°h√°m", "Vƒõ≈ô√≠m", "Svƒõ≈ôil jsem se", "Odpov√≠d√°m"],
                "4. p√°d": ["Zde vid√≠m", "K tomu pot≈ôebuji", "St√°le hled√°m", "M√°m r√°d", "ƒåek√°m na"],
                "5. p√°d": ["Vol√°m v√°s,", "Vid√≠m v√°s,", "Sly≈°√≠m v√°s,", "Kde jste,", "V√°≈æen√≠"],
                "6. p√°d": ["Mluvili jsme o", "P√≠≈°u o", "Zm√≠nil se o", "P≈ôem√Ω≈°l√≠m o", "ƒåtu o"],
                "7. p√°d": ["Jdu s", "Pracuji s", "Setkal jsem se s", "Malujeme s", "Mluv√≠m s"]
            }


            # üíæ Ulo≈æ do souboru
            with open(output_file, "a", encoding="utf-8") as f:
                # jednotliv√© p√°dy
                for i, form in enumerate(forms[:7]):
                    
                    # 1) -----  konkr√©tn√≠ tvar  ----- 
                    pair = {
                        "prompt": f"napi≈° slovo '{word}' v {i+1}. p√°dƒõ:",
                        "completion": form,
                    }
                    f.write(json.dumps(pair, ensure_ascii=False) + "\n")

                    pair = {
                        "prompt": f"vysklo≈àuj slovo {word} v {i+1}. p√°dƒõ",
                        "completion": form,
                    }
                    f.write(json.dumps(pair, ensure_ascii=False) + "\n")

                    # 2) p√°dov√° ot√°zka
                    nazev_padu, otazka = padove_otazky[i]
                    pad_question = {
                        "prompt": f"Na ot√°zku '{otazka}' odpov√≠d√° u slova '{word}' tvar:",
                        "completion": f"{form}"
                    }
                    f.write(json.dumps(pad_question, ensure_ascii=False) + "\n")

                    # 3) dopl≈àovac√≠ √∫loha s n√°hodn√Ωm zaƒç√°tkem
                    case_key = f"{i+1}. p√°d"
                    starter = random.choice(sentence_starters[case_key])
                    fill_prompt = {
                        "prompt": f"Dopl≈à spr√°vn√Ω tvar: {starter} ({word} v p√°dƒõ {nazev_padu})",
                        "completion": form
                    }
                    f.write(json.dumps(fill_prompt, ensure_ascii=False) + "\n")

                # obecn√Ω z√°pis v≈°ech tvar≈Ø
                general = {
                    "prompt": f"jak sklo≈àovat slovo {word} podle vzoru {vzor}",
                    "completion": "\n".join(forms[:7])
                }
                f.write(json.dumps(general, ensure_ascii=False) + "\n")


     

            time.sleep(2)

        except Exception as e:
            print(f"‚ùå Chyba p≈ôi vol√°n√≠ Gemmy: {e}")
            time.sleep(5)
            continue

    print(f"\n‚úÖ Hotovo: v√Ωstup ulo≈æen do souboru {output_file}")






def create_data():    

    # 1. Mapov√°n√≠ rod≈Ø pro vstupy
    gender_labels = {
        "≈æensk√Ω": "≈æensk√©m roce",
        "st≈ôedn√≠": "st≈ôedn√≠m rodƒõ",
        "mu≈æsk√Ω_≈æivotn√Ω": "mu≈æsk√©m ≈æivotn√©m rodƒõ",
        "mu≈æsk√Ω_ne≈æivotn√Ω": "mu≈æsk√©m ne≈æivotn√©m rodƒõ"
    }

    jsonl_lines = []

    # 1) Seznam vzor≈Ø podle rodu
    for gender, patterns in declension_patterns.items():
        label = gender_labels[gender]
        vzory = ", ".join(patterns.keys())
        prompt = f"Jak√© jsou vzory podstatn√Ωch jmen v {label}?"
        jsonl_lines.append({"prompt": prompt, "completion": vzory})

    # 2) Vzorov√° slova
    for gender, groups in vzorova_slova.items():
        for vzor, words in groups.items():
            prompt = f"Uveƒè 5 podstatn√Ωch jmen podle vzoru '{vzor}'."
            completion = ", ".join(words)
            jsonl_lines.append({"prompt": prompt, "completion": completion})

    # 3) V≈°echny tvary slova
    for gender, patterns in declension_patterns.items():
        for slovo, tvary in patterns.items():
            prompt = f"Jak√© jsou tvary slova '{slovo}'?"
            completion = ", ".join(tvary)
            jsonl_lines.append({"prompt": prompt, "completion": completion})

    # 4) Konkr√©tn√≠ p√°d
    for patterns in declension_patterns.values():
        for slovo, tvary in patterns.items():
            for idx, tvar in enumerate(tvary, start=1):
                prompt = f"{idx}. p√°d slova '{slovo}'"
                completion = tvar
                jsonl_lines.append({"prompt": prompt, "completion": completion})

    # Ulo≈æen√≠ do JSONL
    with open("train_prompts.jsonl", "w", encoding="utf-8") as f:
        for entry in jsonl_lines:
            f.write(json.dumps(entry, ensure_ascii=False) + "\n")    



# Spu≈°tƒõn√≠ v√Ωpisu
if __name__ == "__main__":
    create_data()
    create_gemini_prompts()
    print_declension_patterns()